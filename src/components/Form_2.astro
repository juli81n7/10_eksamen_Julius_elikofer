---
const { slug } = Astro.props;
---

<div>
  <div class="form">
    <form name="reserve" id="my-form" action="https://formspree.io/f/xlekvbzw" method="POST">
      <input type="hidden" name="slug" value={slug} />
      <input class="two" type="text" name="name" required placeholder="Full name*" />
      <input class="two" type="email" name="email" required placeholder="yourmail@gmail.com*" />

      <textarea class="all text" name="text" placeholder="Message"></textarea>
      <span>
        <button type="submit"> Reserve</button>
        <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js" is:inline></script>
        <lottie-player class="active" id="mylottie" src="../../animations/loader.json" speed={1}></lottie-player>
      </span>
    </form>
  </div>

  <style>
    button {
      padding: 1rem 2.1rem 0.8rem 2.1rem;
      font-family: "Perandory";
      font-size: 1.5rem;
      font-weight: 100;
      text-decoration: none;
      cursor: pointer;
      line-height: 1rem;
      background-color: var(--primarycolor);
      color: var(--secondarycolor);
      border: 1px solid var(--primarycolor);
      border-color: transparent;
      margin-right: auto;
      transition: 0.3s ease;
      display: flex;
      gap: 1rem;
    }
    button:hover {
      background-color: var(--secondarycolor);
      color: var(--primarycolor);
      border: 1px solid var(--primarycolor);

      transition: 0.3s ease;
    }
    span {
      display: flex;
      gap: 1rem;
      align-items: center;
      justify-content: space-between;
    }
    #mylottie {
      scale: 6;
      height: 10px;
      width: 50px;
      display: none;
    }

    #mylottie.active {
      display: block;
    }
    #kontakt {
      scroll-margin-top: 400px;
    }

    .kontakt {
      align-items: center;
      gap: 1rem;
    }

    .kontakt_other {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      align-items: center;
    }

    p {
      max-width: 60ch;
    }
    h4 {
      color: var(--secondarycolor) !important;
    }
    input {
      color: var(--secondarycolor);
      font-weight: 100;
      font-size: 1rem;
      background-color: none;
      border: 0.1px solid var(--black);
      padding: 1rem 1rem 1rem 1rem;
      color: var(--black);
      font-family: "Montserrat", sans-serif;
      font-size: 1rem;
      width: 100%;
    }
    textarea {
      font-weight: 100;
      font-size: 1rem;
      background: transparent;
      border: 1px solid var(--black);
      padding: 1rem 1rem 1rem 1rem;
      height: 200px;
      color: var(--black);
      font-family: "Montserrat", sans-serif;
      font-size: 1rem;
      resize: auto;
      width: 100%;
    }

    select {
      color: var(--secondarycolor);
      font-weight: 100;
      font-size: 1rem;
      background-color: var(--secondarycolor);
      border: 1px solid var(--black);
      padding: 0.5rem 1rem 0.5rem 1rem;
      color: var(--black);
      font-family: "Montserrat", sans-serif;
    }

    input::placeholder {
      color: var(--black);
      opacity: 0.7;
    }
    .textarea[contenteditable]:empty::before {
      content: "Tekst*";
      color: black;
      opacity: 0.7;
    }

    form {
      margin-top: 1rem;
      margin-bottom: 1rem;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      overflow: hidden;
      position: relative;
    }
    .all {
      grid-column: span 4;
    }

    .two {
    }
    .tekst {
      text-align: start;
    }

    input {
      border: 1px solid var(--black);
      background-color: var(--secondarycolor);
    }

    #form {
      scroll-margin: 70px;
    }

    @media (max-width: 768px) {
      form {
        display: flex;
        flex-direction: column;

        gap: 1rem;
        width: 100%;
      }

      button {
        background-color: var(--primarycolor);
        border: 1px solid var(--primarycolor);
        color: var(--secondarycolor);
        font-family: "Perandory";
        padding: 1rem 2.1rem 0.8rem 2.1rem;
        font-weight: 400;
        font-size: 1.5rem;
        font-style: normal;
        height: 100%;

        display: flex;
        justify-content: center;
        transition: 0.2s ease-in-out;
        cursor: pointer;
        margin: 0rem;
      }
      .kontakt {
        margin-left: 1rem;
        margin-right: 1rem;
        display: flex;
        flex-direction: column;
        grid-template-columns: 2fr 1fr;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
      }

      .container {
        width: 100%;
        margin-top: 2rem;
      }

      .kontakt_other {
        display: flex;
        width: 100%;
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
        justify-content: stretch;
      }
    }
  </style>

  <script>
    import { createClient } from "@supabase/supabase-js";

    // Opretter en klient til Supabase med den angivne nøgle og URL
    const key =
      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ0dHJweHZud2Zzd2R3dnRjaWZoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY4NDM5ODAzNywiZXhwIjoxOTk5OTc0MDM3fQ.cPfl-eeiPXtkNhII4F8D2CQ3e7QcAfZLStGrJJl1zSM";
    const supabase = createClient("https://fttrpxvnwfswdwvtcifh.supabase.co", key);
    const lottie = document.getElementById("mylottie");

    var form = document.getElementById("my-form");

    async function handleSubmit(event) {
      event.preventDefault();
      const data = new FormData(event.target);
      const formData = form.elements;

      let name = formData.name.value;
      let mail = formData.email.value;
      let text = formData.text.value;
      let slug = form.slug.value;

      fetch(event.target.action, {
        method: form.method,
        body: data,
        headers: {
          Accept: "application/json",
        },
      })
        .then((response) => {
          if (response.ok) {
            console.log("success");

            // Indsætter indsendte data i 'orders' tabel i Supabase
            supabase
              .from("orders")
              .insert({ name: name, mail: mail, text: text, slug: slug })
              .then(({ error }) => {
                if (error) {
                  // Kaster en fejl, hvis der opstår en fejl under indsættelsen af data
                  throw new Error(`Kunne ikke indsætte data i 'orders' tabel. Fejl: ${error.message}`);
                }

                // Opdaterer 'reserved' attributten til 'TRUE' i 'stock' tabel i Supabase baseret på slug
                return supabase.from("stock").update({ reserved: "TRUE" }).eq("slug", slug);
              })
              .then(({ data, error }) => {
                if (error) {
                  // Kaster en fejl, hvis der opstår en fejl under opdatering af data
                  throw new Error(`Kunne ikke opdatere data i 'stock' tabel. Fejl: ${error.message}`);
                }

                console.log("Data blev opdateret succesfuldt i 'stock' tabel:", data);
                lottie.classList.add("active");
                lottie.play();

                setTimeout(function () {
                  form.reset();
                  location.href = "/reservation/" + slug;
                }, 2500);
              })
              .catch((error) => {
                // Håndterer eventuelle fejl og udskriver fejlbeskeden
                console.error("Fejl:", error);
              });
          } else {
            response.json().then((data) => {
              if (Object.hasOwn(data, "errors")) {
                console.log("error");
              } else {
                console.log("error");
              }
            });
          }
        })
        .catch((error) => {});
    }
    form.addEventListener("submit", handleSubmit);
  </script>
</div>
